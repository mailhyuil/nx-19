generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
    id    String      @id @default(cuid())
    title String
    content String
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
    deletedAt DateTime? @map("deleted_at")
    attachments Attachment[]
    comments Comment[]
    snapshots PostSnapshot[]
    @@map("posts")
}

model PostSnapshot {
    id    String      @id @default(cuid())
    title String
    content String
    createdAt DateTime @default(now()) @map("created_at")
    postId String @map("post_id")
    post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
    comments CommentSnapshot[]
    attachments AttachmentSnapshot[]
    @@map("post_snapshots")
}

model Comment {
    id    String      @id @default(cuid())
    content String
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
    post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId String @map("post_id")
    parent Comment? @relation("comment_comment",fields: [parentId], references: [id], onDelete: Cascade)
    parentId String? @map("parent_id")
    children Comment[] @relation("comment_comment")
    snapshots CommentSnapshot[]
    @@map("comments")
}

model CommentSnapshot {
    id    String      @id @default(cuid())
    content String
    createdAt DateTime @default(now()) @map("created_at")
    comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
    commentId String @map("comment_id")
    parent CommentSnapshot @relation("comment_snapshot_comment_snapshot",fields: [parentId], references: [id], onDelete: Cascade)
    parentId String @map("parent_id")
    children CommentSnapshot[] @relation("comment_snapshot_comment_snapshot")
    post PostSnapshot @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId String @map("post_id")
    @@map("comment_snapshots")
}

model Attachment {
    id    String      @id @default(cuid())
    name  String
    url   String
    extension String?
    createdAt DateTime @default(now()) @map("created_at")
    post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId String @map("post_id")
    snapshots AttachmentSnapshot[]
    @@map("attachments")
}

model AttachmentSnapshot {
    id    String      @id @default(cuid())
    name  String
    url   String
    extension String?
    createdAt DateTime @default(now()) @map("created_at")
    attachment Attachment @relation(fields: [attachmentId], references: [id], onDelete: Cascade)
    attachmentId String @map("attachment_id")
    post PostSnapshot @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId String @map("post_id")
    @@map("attachment_snapshots")
}
